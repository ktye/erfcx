package erfcx

import "testing"

func TestErrfcx(t *testing.T) {
	// Test data is generated from C code using libcerf-5.1.
	// It ranges from roughly x = -20 to 100.
	testCases := []struct {
		x, y float64
	}{
		{-1.9876543211000001e+001, 7.5993772057934211e+171},
		{-1.8876543211000001e+001, 1.1233792870730981e+155},
		{-1.7876543211000001e+001, 1.2270543124049173e+139},
		{-1.6876543211000001e+001, 9.9035323352516728e+123},
		{-1.5876543211000000e+001, 5.9061629584586932e+109},
		{-1.4876543211000000e+001, 2.6026135765535433e+096},
		{-1.3876543211000000e+001, 8.4742821600856284e+083},
		{-1.2876543211000000e+001, 2.0388492381346472e+072},
		{-1.1876543211000000e+001, 3.6245681518044396e+061},
		{-1.0876543211000000e+001, 4.7611996253041141e+051},
		{-9.8765432109999995e+000, 4.6213139691323238e+042},
		{-8.8765432109999995e+000, 3.3143893400168846e+034},
		{-7.8765432110000004e+000, 1.7564287433092872e+027},
		{-6.8765432110000004e+000, 6.8777519935523468e+020},
		{-5.8765432110000004e+000, 1.9899925527634105e+015},
		{-4.8765432110000004e+000, 4.2544689127354012e+010},
		{-3.8765432110000000e+000, 6.7209120587213766e+006},
		{-2.8765432110000000e+000, 7.8449423817704774e+003},
		{-1.8765432110000000e+000, 6.7395247501809379e+001},
		{-8.7654321099999999e-001, 3.8484916547882615e+000},
		{1.2345678900000000e-001, 8.7462809149533716e-001},
		{1.1234567890000000e+000, 3.9606575881309242e-001},
		{2.1234567890000000e+000, 2.4282018948549650e-001},
		{3.1234567890000000e+000, 1.7252247571473239e-001},
		{4.1234567889999996e+000, 1.3311219929572021e-001},
		{5.1234567889999996e+000, 1.0813116116007185e-001},
		{6.1234567889999996e+000, 9.0953358905164997e-002},
		{7.1234567889999996e+000, 7.8443252318773152e-002},
		{8.1234567890000005e+000, 6.8937213828418345e-002},
		{9.1234567890000005e+000, 6.1474490643766894e-002},
		{1.0123456789000000e+001, 5.5462908407559304e-002},
		{1.1123456789000000e+001, 5.0518178993660047e-002},
		{1.2123456789000000e+001, 4.6380298842732412e-002},
		{1.3123456789000000e+001, 4.2867189118418657e-002},
		{1.4123456789000000e+001, 3.9847601642020850e-002},
		{1.5123456789000000e+001, 3.7224572686085776e-002},
		{1.6123456788999999e+001, 3.4924933913890649e-002},
		{1.7123456788999999e+001, 3.2892446225654570e-002},
		{1.8123456788999999e+001, 3.1083178074309582e-002},
		{1.9123456788999999e+001, 2.9462317564629366e-002},
		{2.0123456788999999e+001, 2.8001925498597442e-002},
		{2.1123456788999999e+001, 2.6679320873852500e-002},
		{2.2123456788999999e+001, 2.5475900651175405e-002},
		{2.3123456788999999e+001, 2.4376263478731511e-002},
		{2.4123456788999999e+001, 2.3367549877397753e-002},
		{2.5123456788999999e+001, 2.2438939017415890e-002},
		{2.6123456788999999e+001, 2.1581260408892758e-002},
		{2.7123456788999999e+001, 2.0786691033504695e-002},
		{2.8123456788999999e+001, 2.0048516773154518e-002},
		{2.9123456788999999e+001, 1.9360942763904952e-002},
		{3.0123456788999999e+001, 1.8718941362558496e-002},
		{3.1123456788999999e+001, 1.8118129305609319e-002},
		{3.2123456789000002e+001, 1.7554667726855933e-002},
		{3.3123456789000002e+001, 1.7025180222569231e-002},
		{3.4123456789000002e+001, 1.6526685276114436e-002},
		{3.5123456789000002e+001, 1.6056540190507288e-002},
		{3.6123456789000002e+001, 1.5612394306446932e-002},
		{3.7123456789000002e+001, 1.5192149760552241e-002},
		{3.8123456789000002e+001, 1.4793928403500189e-002},
		{3.9123456789000002e+001, 1.4416043779087642e-002},
		{4.0123456789000002e+001, 1.4056977283678313e-002},
		{4.1123456789000002e+001, 1.3715357796289164e-002},
		{4.2123456789000002e+001, 1.3389944203986785e-002},
		{4.3123456789000002e+001, 1.3079610353711824e-002},
		{4.4123456789000002e+001, 1.2783332046446333e-002},
		{4.5123456789000002e+001, 1.2500175757569093e-002},
		{4.6123456789000002e+001, 1.2229288821953456e-002},
		{4.7123456789000002e+001, 1.1969890866648713e-002},
		{4.8123456789000002e+001, 1.1721266310010107e-002},
		{4.9123456789000002e+001, 1.1482757775581331e-002},
		{5.0123456789000002e+001, 1.1253760293198006e-002},
		{5.1123456789000002e+001, 1.1033716179699936e-002},
		{5.2123456789000002e+001, 1.0822110508126983e-002},
		{5.3123456789000002e+001, 1.0618467087972320e-002},
		{5.4123456789000002e+001, 1.0422344890492551e-002},
		{5.5123456789000002e+001, 1.0233334862637139e-002},
		{5.6123456789000002e+001, 1.0051057081192314e-002},
		{5.7123456789000002e+001, 9.8751582055032743e-003},
		{5.8123456789000002e+001, 9.7053091928613246e-003},
		{5.9123456789000002e+001, 9.5412032454950026e-003},
		{6.0123456789000002e+001, 9.3825539622320406e-003},
		{6.1123456789000002e+001, 9.2290936714192161e-003},
		{6.2123456789000002e+001, 9.0805719246987143e-003},
		{6.3123456789000002e+001, 8.9367541338218424e-003},
		{6.4123456789000002e+001, 8.7974203349016396e-003},
		{6.5123456789000002e+001, 8.6623640664197938e-003},
		{6.6123456789000002e+001, 8.5313913489572114e-003},
		{6.7123456789000002e+001, 8.4043197560498498e-003},
		{6.8123456789000002e+001, 8.2809775668147706e-003},
		{6.9123456789000002e+001, 8.1612029920729839e-003},
		{7.0123456789000002e+001, 8.0448434666386681e-003},
		{7.1123456789000002e+001, 7.9317550012680069e-003},
		{7.2123456789000002e+001, 7.8218015884820337e-003},
		{7.3123456789000002e+001, 7.7148546571102336e-003},
		{7.4123456789000002e+001, 7.6107925709574054e-003},
		{7.5123456789000002e+001, 7.5095001674854011e-003},
		{7.6123456789000002e+001, 7.4108683328328170e-003},
		{7.7123456789000002e+001, 7.3147936098767975e-003},
		{7.8123456789000002e+001, 7.2211778363783395e-003},
		{7.9123456789000002e+001, 7.1299278105514292e-003},
		{8.0123456789000002e+001, 7.0409549816616438e-003},
		{8.1123456789000002e+001, 6.9541751634958930e-003},
		{8.2123456789000002e+001, 6.8695082687549886e-003},
		{8.3123456789000002e+001, 6.7868780626081657e-003},
		{8.4123456789000002e+001, 6.7062119338160012e-003},
		{8.5123456789000002e+001, 6.6274406819778744e-003},
		{8.6123456789000002e+001, 6.5504983195940909e-003},
		{8.7123456789000002e+001, 6.4753218877530525e-003},
		{8.8123456789000002e+001, 6.4018512843617530e-003},
		{8.9123456789000002e+001, 6.3300291039349206e-003},
		{9.0123456789000002e+001, 6.2598004880455183e-003},
		{9.1123456789000002e+001, 6.1911129856179773e-003},
		{9.2123456789000002e+001, 6.1239164223166765e-003},
		{9.3123456789000002e+001, 6.0581627783462804e-003},
		{9.4123456789000002e+001, 5.9938060740386467e-003},
		{9.5123456789000002e+001, 5.9308022626535697e-003},
		{9.6123456789000002e+001, 5.8691091298682567e-003},
		{9.7123456789000002e+001, 5.8086861994736637e-003},
		{9.8123456789000002e+001, 5.7494946448351028e-003},
		{9.9123456789000002e+001, 5.6914972057102286e-003},
	}

	for _, tc := range testCases {
		if y := Erfcx(tc.x); veryclose(y, tc.y) == false {
			t.Fatalf("erfcx(%v): expected %v, got %v", tc.x, tc.y, y)
		}
	}
}

// The floating point comparison tests are copied from from math/all_test.go.

func tolerance(a, b, e float64) bool {
	// Multiplying by e here can underflow denormal values to zero.
	// Check a==b so that at least if a and b are small and identical
	// we say they match.
	if a == b {
		return true
	}
	d := a - b
	if d < 0 {
		d = -d
	}
	// note: b is correct (expected) value, a is actual value.
	// make error tolerance a fraction of b, not a.
	if b != 0 {
		e = e * b
		if e < 0 {
			e = -e
		}
	}
	return d < e
}
func veryclose(a, b float64) bool { return tolerance(a, b, 4e-16) }
